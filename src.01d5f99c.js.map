{"version":3,"sources":["index.js"],"names":["refs","timer","document","querySelector","days","hours","mins","secs","CountdownTimer","selector","targetDate","setInterval","currentTime","Date","now","deltaTime","console","log","time","getTimeComponents","updateClockface","clearInterval","intervalId","value","String","padStart","pad","Math","floor","innerHTML"],"mappings":";;;AA4EA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EA5EA,QAAA,mBAEA,IAAMA,EAAO,CACTC,MAAOC,SAASC,cAAc,YAC9BC,KAAMF,SAASC,cAAc,2BAC7BE,MAAOH,SAASC,cAAc,4BAC9BG,KAAMJ,SAASC,cAAc,2BAC7BI,KAAML,SAASC,cAAc,4BAG3BK,EAAAA,WACgC,SAAA,EAAA,GAAA,IAAA,EAAA,KAAvBC,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAa,EAAA,KAAA,GAMvB,EAAA,KAAA,aAAA,MAEAC,EAAAA,KAAAA,aAAAA,YAAY,WACjBC,IAAAA,EAAcC,KAAKC,MAKpBC,EAAY,EAAKL,WAAaE,EACpCI,QAAQC,IAAIF,GACRG,IAAAA,EAAO,EAAKC,kBAAkBJ,GAMlC,EAAKK,gBAAgBF,GAEYA,EAA1Bd,KAA0Bc,EAArBb,MAAqBa,EAAdZ,KAAcY,EAARX,KACzBS,QAAQC,IAAIC,IAEV,MA1BIT,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EAClBM,QAAQC,IAAIR,GA8DhB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,aApCe,MAAA,WACXY,cAAc,KAAKC,cAmCvB,CAAA,IAAA,MA9BMC,MAAAA,SAAAA,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,OA6BrC,CAAA,IAAA,oBAvBoBP,MAAAA,SAAAA,GAMT,MAAA,CAACd,KALO,KAAKsB,IAAIC,KAAKC,MAAMV,EAAQ,QAK9Bb,MAJG,KAAKqB,IAAIC,KAAKC,MAAOV,EAAQ,MAAyB,OAIlDZ,KAHL,KAAKoB,IAAIC,KAAKC,MAAOV,EAAQ,KAAoB,MAGtCX,KAFX,KAAKmB,IAAIC,KAAKC,MAAOV,EAAQ,IAAc,SAmB9D,CAAA,IAAA,kBAZ2C,MAAA,SAAA,GAAxBd,IAAAA,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAC7BP,EAAKI,KAAKyB,UAAYzB,EACtBJ,EAAKK,MAAMwB,UAAYxB,EACvBL,EAAKM,KAAKuB,UAAYvB,EACtBN,EAAKO,KAAKsB,UAAYtB,MAQ9B,EAlEMC,GAkEN,IAAIA,EAAe,CACfC,SAAU,WACVC,WAAY,IAAIG,KAAK","file":"src.01d5f99c.js","sourceRoot":"..\\src","sourcesContent":["import  './css/timer.css';\r\n\r\nconst refs = {\r\n    timer: document.querySelector('#timer-1'),\r\n    days: document.querySelector('span[data-value=\"days\"]'),\r\n    hours: document.querySelector('span[data-value=\"hours\"]'),\r\n    mins: document.querySelector('span[data-value=\"mins\"]'),\r\n    secs: document.querySelector('span[data-value=\"secs\"]'),\r\n};\r\n\r\nclass CountdownTimer {\r\n  constructor({selector, targetDate}) {\r\n    this.selector = selector;\r\n    this.targetDate = targetDate;\r\n    console.log(selector);\r\n  }\r\n\r\n  intervalId = null;\r\n\r\n  intervalId = setInterval(() => {\r\n    const currentTime = Date.now();\r\n   // console.log('start -> currentTime', currentTime);\r\n   // console.log('start -> currentTime', currentTime);\r\n   //const deltaTime = currentTime - startTime;\r\n\r\n   const deltaTime = this.targetDate - currentTime;\r\n   console.log(deltaTime);\r\n   let time = this.getTimeComponents(deltaTime);\r\n\r\n  //  console.log(timeComponents = {days,hours, mins, secs});\r\n  // console.log({days,hours, mins, secs});\r\n   // console.log(`${days}:${hours}:${mins}:${secs}`);\r\n\r\n   this.updateClockface(time);\r\n\r\n   const {days,hours, mins, secs} = time;\r\n   console.log(time);\r\n\r\n  }, 1000);\r\n\r\n  finishTime() {\r\n    clearInterval(this.intervalId);\r\n    }\r\n//Принимает число, приводит к строке и добавляет в начало 0\r\n//если число меньше 2-х знаков\r\n\r\n  pad(value) {\r\n    return String(value).padStart(2, '0');\r\n  }\r\n\r\n//Для подсчета значений используй следующие готовые формулы, \r\n//где time - разница между targetDate и текущей датой.\r\n\r\n  getTimeComponents(time) {\r\n      const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n      const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n      const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n      const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n    return {days,hours, mins, secs};\r\n  }\r\n  \r\n  \r\n\r\n  updateClockface({days,hours, mins, secs}){\r\n        refs.days.innerHTML = days;\r\n        refs.hours.innerHTML = hours;\r\n        refs.mins.innerHTML = mins;\r\n        refs.secs.innerHTML = secs;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n//Плагин это класс CountdownTimer, экземпляр которого создает новый таймер с настройками.\r\nnew CountdownTimer({\r\n    selector: '#timer-1',\r\n    targetDate: new Date('April 30, 2021'),\r\n  });\r\n"]}